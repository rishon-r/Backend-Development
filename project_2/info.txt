THIS FILE CONTAINS SOME THEORY AND SMALL NOTES REGARDING THIS PROJECT

1. What is a .env file?
- A .env file is a simple text file where you store environment variables for your application.
- It lets you keep configuration values — like secrets, API keys, database URLs, and settings — outside your source code.
- They are stored in the form of key value pairs
- A .env file is usually named exactly .env and sits in the root of your project.
- The project root is the top-level folder of your project — the main directory that contains all the files and subfolders for that project.
- It is typically added to the .gitignore file to keep it from being added to the version control

2. What packages have we installed for this project?
- We ran this command: npm install express bcryptjs jsonwebtoken
- We installed express for the same reason as we did in project 1, to make building web servers with node easier
- bcryptjs helps us with encryption and decryption alogirthms so that we don't have to write them ourselves
- jsonwebtoken is the library that provides necessary features for authentication via JWT

3. Why don't we use nodemon here?
- We don't use nodemon here as we use a later version of node and later versions of node will update your server immediately after changes to code have been done
- These will be reflected in real time without the need to restart the server
- Hence, we won't need nodemon to do this
- This can be done by adding the --watch flag to node inside dev

4. What runs when we type the following command: npm run dev?
- dev in the scripts field of package.json contains the following command: "node --watch --env-file=.env --experimental-strip-types --experimental-sqlite ./src/server.js"
- We have discussed what the --watch does in the previous question. It is called a flag

5. Why do we use: import express from 'express', instead of const express= require('express') here?
- It is the new way of doing so
- To do this we have to add a fiel of the form: "type": "module" to package.json
- The default value of "type" is "common.js" and that is what is used in the previous syntax

6. What does the public directory in a project do?
- The public directory (sometimes called static or assets) is a folder in your project where you put static files that you want the web server to serve as-is to clients (like browsers).
- The public directory holds files that:
  - Don’t need any special processing by your backend server
  - Are sent directly to the user’s browser
  - These files are publicly accessible to anyone visiting your site.
- Examples: HTML files, CSS files, Client Side JS files

7. What is path.join()?
- path.join() is a method provided by Node.js’s built-in path module.
- It joins all given path segments together using the correct platform-specific separator (/ on POSIX (Linux, macOS) and \ on Windows).
- It also normalizes the resulting path: removing redundant slashes and resolving . (current directory) and .. (parent directory) segments.
- When you’re building file paths in a cross-platform Node app, you can’t safely just concatenate strings like: const filePath = 'folder' + '/' + 'file.txt';
- Because: On Windows, the separator is \, not /
- You might also accidentally introduce double slashes or fail to resolve . and .. correctly
- Syntax:
    const path = require('path');
    const result = path.join('folder', 'subfolder', 'file.txt');
- It accepts any number of string arguments, each representing a path segment
- Concatenates with correct separator
- It won’t convert to an absolute path unless the first segment is absolute

8. What is the Payload tab under Network section upon clicking inspect in a google chrome page?
- The Payload tab shows you the data that your browser sent with an HTTP request.
- It appears when you inspect a network request — like when your web page does:
  - A POST request (like submitting a form).
  - Or a PUT, PATCH, DELETE request.
  - Or even a GET request with query parameters.

9. What does app.use() really do?
- app.use() is a method on your Express application that registers middleware or routers.
- You can think of it as telling Express: “For every request, check if this middleware should run. If yes, run it.”
- Syntax: app.use([path], middlewareFunction)
- It comes in two forms:
  - app.use(middlewareFunction) → middleware runs on every request, no matter the path
  - app.use('/somePath', middlewareFunction) → middleware runs only if the request starts with /somePath

10. What does express.Router() do?
- express.Router() is a function provided by Express.
- It creates a “mini Express app” that you can attach routes and middleware to.
- You then mount that mini app onto your main app with app.use()
- When you only have a few routes, you could put everything in server.js
- Example:
  app.get('/login', ...)
  app.post('/register', ...)
- The above is fine for tiny projects
- But in a real app with:
  - Auth routes
  - API routes
  - Dashboard routes
  - Admin routes
  …it gets messy fast!
- So you break them into routers, each in its own file:
  - routes/authRoutes.js
  - routes/apiRoutes.js
  - etc.
- In every one of these files, you will create a Router instance and then at the end of the file export the router instance
- In server.js you will import these router instances
- Then, with the help of app.use you will run these router instances when the associated path prefix is requested

10. Some details on JWT (JSON WEB TOKENS)
- When you call jwt.sign(payload, secret, options), you’re creating a JWT with three parts
- 1. HEADER: Declares that this is a JWT and what algorithm was used to sign it
  - {
  "alg": "HS256",
  "typ": "JWT"
  }
- 2. PAYLOAD
  - This is your actual data
  - In the example in authRoutes.js: { id: result.lastInsertRowid } — so the token carries the user’s unique ID.
  - Never put sensitive data like passwords here — the payload is only base64-encoded, not encrypted!
- 3. SIGNATURE
  - This is the cryptographic part
  - It signs the header + payload with your secret key (process.env.JWT_SECRET).
  - It ensures that if someone tampers with the payload, the signature won’t match and the token will be invalid.
  - A full JWT looks like:
      HEADER.PAYLOAD.SIGNATURE
      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjgwMDExMzAwLCJleHAiOjE2ODAwOTc3MDB9.Q5-KuKZwP4SxABTbgB1TgllzE7m9EKliWPlh7Hc3ss

11. How JWT authentication works?
  - 1. Register/Login
      - User sends username + password.
      - Server verifies credentials.
      - If valid, server creates a signed JWT with the user’s ID and sends it back.

  - 2. Client stores the JWT
      - The client (browser, mobile app) stores the token.
      - Usually in localStorage, sessionStorage, or an HTTP-only cookie.
      - The token is not stored in the database.

  - 3. Client sends JWT on every request

  - 4. Server verifies JWT
      - The server checks:
        - Is the token signed correctly with the same secret key?
        - Is it expired?
      - If valid, the server trusts the user ID in the payload and authorizes the request.

  - 5. No session needed
      - With JWT, you don’t store a server-side session.
      - It’s stateless — the server only needs the secret key to verify tokens



