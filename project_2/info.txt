THIS FILE CONTAINS SOME THEORY AND SMALL NOTES REGARDING THIS PROJECT

1. What is a .env file?
- A .env file is a simple text file where you store environment variables for your application.
- It lets you keep configuration values — like secrets, API keys, database URLs, and settings — outside your source code.
- They are stored in the form of key value pairs
- A .env file is usually named exactly .env and sits in the root of your project.
- The project root is the top-level folder of your project — the main directory that contains all the files and subfolders for that project.
- It is typically added to the .gitignore file to keep it from being added to the version control

2. What packages have we installed for this project?
- We ran this command: npm install express bcryptjs jsonwebtoken
- We installed express for the same reason as we did in project 1, to make building web servers with node easier
- bcryptjs helps us with encryption and decryption alogirthms so that we don't have to write them ourselves
- jsonwebtoken is the library that provides necessary features for authentication via JWT

3. Why don't we use nodemon here?
- We don't use nodemon here as we use a later version of node and later versions of node will update your server immediately after changes to code have been done
- These will be reflected in real time without the need to restart the server
- Hence, we won't need nodemon to do this
- This can be done by adding the --watch flag to node inside dev

4. What runs when we type the following command: npm run dev?
- dev in the scripts field of package.json contains the following command: "node --watch --env-file=.env --experimental-strip-types --experimental-sqlite ./src/server.js"
- We have discussed what the --watch does in the previous question. It is called a flag

5. Why do we use: import express from 'express', instead of const express= require('express') here?
- It is the new way of doing so
- To do this we have to add a fiel of the form: "type": "module" to package.json
- The default value of "type" is "common.js" and that is what is used in the previous syntax

6. What does the public directory in a project do?
- The public directory (sometimes called static or assets) is a folder in your project where you put static files that you want the web server to serve as-is to clients (like browsers).
- The public directory holds files that:
  - Don’t need any special processing by your backend server
  - Are sent directly to the user’s browser
  - These files are publicly accessible to anyone visiting your site.
- Examples: HTML files, CSS files, Client Side JS files

7. What is path.join()?
- path.join() is a method provided by Node.js’s built-in path module.
- It joins all given path segments together using the correct platform-specific separator (/ on POSIX (Linux, macOS) and \ on Windows).
- It also normalizes the resulting path: removing redundant slashes and resolving . (current directory) and .. (parent directory) segments.
- When you’re building file paths in a cross-platform Node app, you can’t safely just concatenate strings like: const filePath = 'folder' + '/' + 'file.txt';
- Because: On Windows, the separator is \, not /
- You might also accidentally introduce double slashes or fail to resolve . and .. correctly
- Syntax:
    const path = require('path');
    const result = path.join('folder', 'subfolder', 'file.txt');
- It accepts any number of string arguments, each representing a path segment
- Concatenates with correct separator
- It won’t convert to an absolute path unless the first segment is absolute

